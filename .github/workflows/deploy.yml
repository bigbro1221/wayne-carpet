name: Deploy to Google Cloud

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      API_URL: ${{ secrets.WAYNE_CARPET_API_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.GCC_SSH_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Firebase Service Account Key
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" | base64 --decode > firebase_account_key.json
          pwd
          ls -l

      # Backend and Telegram Bot Deployment
      - name: Deploy backend and bot as Docker containers
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        run: |
          pwd
          ls -l
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCC_USER }}@${{ secrets.GCC_SERVER_IP }} << 'EOF'
            cd /var/www/wayne_carpet
            # Pull latest code
            git pull origin master
            # Build and start Docker containers
            docker-compose down  # Stop existing containers
            docker-compose up -d --build  # Build and start new containers
          EOF

      # Frontend Deployment
      - name: Set up Node.js for frontend
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install frontend dependencies and build
        working-directory: ./crm
        run: |
          npm install
          CI=false npm run build

      
      - name: Deploy frontend to server
        working-directory: ./crm
        run: |
          echo "Current Working Directory: $(pwd)"
          echo "Contents of the directory: $(ls -la)"
          echo "Starting deployment....."
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCC_USER }}@${{ secrets.GCC_SERVER_IP }} "cd /var/www/html/ && rm -rf * && exit"
          scp -o StrictHostKeyChecking=no -r ./build/* ${{ secrets.GCC_USER }}@${{ secrets.GCC_SERVER_IP }}:/var/www/html/
          echo "Deployment completed."
